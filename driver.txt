
public class SalesMapper extends Mapper<LongWritable, Text, Text, IntWritable> {

    private final static IntWritable one = new IntWritable(1);
    private Text country = new Text();

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        // Tách dòng dữ liệu thành các trường
        String[] fields = value.toString().split(",");

        // Đảm bảo rằng dòng dữ liệu có ít nhất 8 trường (quốc gia nằm ở cột thứ 7)
        if (fields.length > 7) {
            country.set(fields[7]); // Trích xuất quốc gia
            context.write(country, one); // Gửi cặp key-value (quốc gia, 1)
        }
    }
}

public class SalesReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
        int sum = 0;

        // Tính tổng số lượng sản phẩm bán ra cho mỗi quốc gia
        for (IntWritable value : values) {
            sum += value.get();
        }

        context.write(key, new IntWritable(sum)); // Gửi cặp key-value (quốc gia, tổng số lượng)
    }
}
    public static void main(String[] args) throws Exception {
        // Cấu hình công việc Hadoop
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Sales Count by Country");

        // Thiết lập các lớp Mapper và Reducer
        job.setJarByClass(SalesDriver.class);
        job.setMapperClass(SalesMapper.class);
        job.setReducerClass(SalesReducer.class);

        // Thiết lập định dạng đầu ra cho key-value
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        // Thiết lập các đường dẫn cho dữ liệu đầu vào và đầu ra
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        // Chạy công việc MapReduce và chờ hoàn thành
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
