public class SalesMapper extends Mapper<LongWritable, Text, Text, IntWritable> {

    private boolean isHeader = true;  // To skip the header

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        if (isHeader) {
            isHeader = false;  // Skip the first line (header)
            return;
        }

        String[] fields = value.toString().split(","); // Split the line into fields using a comma
        
        // Check if the row contains the required fields
        if (fields.length > 7) {
            String country = fields[7].trim();  // Extract and trim the country (7th field)
            
            if (!country.isEmpty()) {  // Check if the country field is not empty
                context.write(new Text(country), new IntWritable(1));  // Output key: country, value: 1
            }
        }
    }
}

public class SalesReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
        int transactionCount = 0;

        // Sum up all the values (number of transactions) for each country
        for (IntWritable value : values) {
            transactionCount += value.get();
        }

        // Output key: country, value: total number of transactions
        context.write(key, new IntWritable(transactionCount));
    }
}
public class SalesDriver {

    public static void main(String[] args) throws Exception {
        // Create a new configuration and job
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Sales Transactions Count");

        // Set the main class, mapper, and reducer classes
        job.setJarByClass(SalesDriver.class);
        job.setMapperClass(SalesMapper.class);
        job.setReducerClass(SalesReducer.class);

        // Set output key and value types
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        // Set input and output paths
        FileInputFormat.addInputPath(job, new Path(args[0]));  // input CSV file path
        FileOutputFormat.setOutputPath(job, new Path(args[1])); // output directory path

        // Wait for the job to finish
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
